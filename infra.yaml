AWSTemplateFormatVersion: 2010-09-09
Description: >
  Minimal GuardDuty Test Environment with NAT Gateway for RedTeam Internet Access

Parameters:
  AvailabilityZones:
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Default: us-east-1a
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
  VPCCIDR:
    Type: String
    Default: 172.16.0.0/24
  PublicSubnetCIDR:
    Type: String
    Default: 172.16.0.0/25
  PrivateSubnetCIDR:
    Type: String
    Default: 172.16.0.128/25
  RemoteAccessCIDR:
    Type: String
    Default: 0.0.0.0/0
  LatestLinuxAMI:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]
      MapPublicIpOnLaunch: true

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH from Internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref RemoteAccessCIDR

  LinuxTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH from RedTeam
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref RedTeamSecurityGroup

  RedTeamSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH from BastionHost
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnet
      ImageId: !Ref LatestLinuxAMI
      SecurityGroupIds: [ !Ref BastionSecurityGroup ]
      Tags:
        - Key: Name
          Value: BastionHost
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y nmap-ncat

  RedTeamInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PrivateSubnet
      ImageId: !Ref LatestLinuxAMI
      SecurityGroupIds: [ !Ref RedTeamSecurityGroup ]
      Tags:
        - Key: Name
          Value: RedTeamInstance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y git nmap hydra nc unzip python3
          pip3 install paramiko
          git clone https://github.com/galkan/crowbar /home/ec2-user/crowbar
          curl -L -o /home/ec2-user/guardduty_tester.sh \
            https://raw.githubusercontent.com/awslabs/amazon-guardduty-tester/9ed7b5f6057bda5cbf7ac3608555fe36e7a7c5fe/guardduty_tester.sh
          chmod +x /home/ec2-user/guardduty_tester.sh
          chmod +x /home/ec2-user/crowbar/crowbar.py

  LinuxTargetInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PrivateSubnet
      ImageId: !Ref LatestLinuxAMI
      SecurityGroupIds: [ !Ref LinuxTargetSecurityGroup ]
      Tags:
        - Key: Name
          Value: LinuxTarget

Outputs:
  LinuxTargetSecurityGroupId:
    Description: Security Group ID of the Linux Target (used in Lambda remediation)
    Value: !Ref LinuxTargetSecurityGroup
    Export:
      Name: LinuxTargetSecurityGroupId

  RedTeamInstanceId:
    Description: EC2 Instance ID of RedTeam (attacker)
    Value: !Ref RedTeamInstance
