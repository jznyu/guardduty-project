AWSTemplateFormatVersion: 2010-09-09
Description: >
  Minimal GuardDuty Test Environment with NAT Gateway for RedTeam Internet Access (NACL-based remediation)

Parameters:
  AvailabilityZones:
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Default: us-east-1a
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
  VPCCIDR:
    Type: String
    Default: 172.16.0.0/24
  PublicSubnetCIDR:
    Type: String
    Default: 172.16.0.0/25
  PrivateSubnetCIDR:
    Type: String
    Default: 172.16.0.128/25
  RemoteAccessCIDR:
    Type: String
    Default: 0.0.0.0/0
  LatestLinuxAMI:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]
      MapPublicIpOnLaunch: true

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]

  PublicSubnetNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicSubnetNACL

  PrivateSubnetNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateSubnetNACL

  PublicSubnetNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      NetworkAclId: !Ref PublicSubnetNACL

  PrivateSubnetNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      NetworkAclId: !Ref PrivateSubnetNACL

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH from Internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref RemoteAccessCIDR

  RedTeamSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH from BastionHost
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnet
      ImageId: !Ref LatestLinuxAMI
      SecurityGroupIds: [ !Ref BastionSecurityGroup ]
      Tags:
        - Key: Name
          Value: BastionHost
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y nmap-ncat

  RedTeamInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PrivateSubnet
      ImageId: !Ref LatestLinuxAMI
      SecurityGroupIds: [ !Ref RedTeamSecurityGroup ]
      Tags:
        - Key: Name
          Value: RedTeamInstance
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash
              set -xe
              yum update -y || echo "yum update failed, continuing"
              yum install -y git nmap nc python3
              python3 -m ensurepip --upgrade
              pip3 install paramiko
              git clone https://github.com/galkan/crowbar /home/ec2-user/crowbar
              chmod +x /home/ec2-user/crowbar/crowbar.py
              mkdir -p /home/ec2-user/compromised_keys
              echo "FAKE_KEY" > /home/ec2-user/compromised_keys/fakekey.pem
              for i in {1..20}; do cp /home/ec2-user/compromised_keys/fakekey.pem /home/ec2-user/compromised_keys/compromised$i.pem; done
              echo 'BASIC_LINUX_TARGET="${LinuxTargetIP}"' > /home/ec2-user/localIps.sh
              echo "RED_TEAM_IP=\"$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\"" >> /home/ec2-user/localIps.sh
              curl -L -o /home/ec2-user/guardduty_tester.sh https://raw.githubusercontent.com/jznyu/guardduty-project/main/guardduty_tester.sh
              chmod +x /home/ec2-user/guardduty_tester.sh
              chown -R ec2-user:ec2-user /home/ec2-user
            - LinuxTargetIP:
                Fn::GetAtt:
                  - LinuxTargetInstance
                  - PrivateIp

  LinuxTargetInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PrivateSubnet
      ImageId: !Ref LatestLinuxAMI
      SecurityGroupIds: [ !Ref BastionSecurityGroup ]
      Tags:
        - Key: Name
          Value: LinuxTarget

Outputs:
  RedTeamInstanceId:
    Description: EC2 Instance ID of RedTeam
    Value: !Ref RedTeamInstance

  RedTeamPrivateIP:
    Description: Private IP of RedTeamInstance
    Value: !GetAtt RedTeamInstance.PrivateIp
    Export:
      Name: RedTeamPrivateIP

  PrivateNACLId:
    Description: ID of the private subnet's NACL
    Value: !Ref PrivateSubnetNACL
    Export:
      Name: PrivateNACLId
