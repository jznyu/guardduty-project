AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda-based GuardDuty SSH Brute Force Remediation using NACL and SNS Alert

Parameters:
  NotificationEmail:
    Type: String
    Description: Email address to notify on threat detection

Resources:
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "GuardDuty Alerts"
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail

  RemediationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: RemediationPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkAclEntry
                  - ec2:DescribeNetworkAcls
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${RemediationLambda}:*"
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref NotificationTopic

  RemediationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: sshNACLRemediationLambda
      Runtime: python3.9
      Role: !GetAtt RemediationLambdaRole.Arn
      Handler: index.lambda_handler
      Timeout: 60
      Environment:
        Variables:
          TARGET_NACL_ID: !ImportValue PrivateNACLId
          NOTIFICATION_TOPIC: !Ref NotificationTopic
      Code:
        ZipFile: |
          import os
          import json
          import boto3

          ec2 = boto3.client('ec2')
          sns = boto3.client('sns')

          def lambda_handler(event, context):
              print("Received event:", json.dumps(event))
              finding = event['detail'].get('service', {}).get('action', {}).get('networkConnectionAction', {})
              ip = finding.get('remoteIpDetails', {}).get('ipAddressV4')

              if not ip:
                  print("No IP address found in the GuardDuty event.")
                  return

              nacl_id = os.environ['TARGET_NACL_ID']
              print(f"Blocking {ip} in NACL {nacl_id}")

              # Dynamically find an available rule number (starts at 100)
              nacls = ec2.describe_network_acls(NetworkAclIds=[nacl_id])['NetworkAcls']
              existing_rules = [entry['RuleNumber'] for entry in nacls[0]['Entries']]
              rule_number = next(i for i in range(100, 32766) if i not in existing_rules)

              ec2.create_network_acl_entry(
                  NetworkAclId=nacl_id,
                  RuleNumber=rule_number,
                  Protocol='6',  # TCP
                  RuleAction='deny',
                  Egress=False,
                  CidrBlock=f"{ip}/32",
                  PortRange={
                      'From': 22,
                      'To': 22
                  }
              )

              message = f"GuardDuty detected SSH brute force from {ip}. Blocked via NACL rule #{rule_number}."
              print(message)
              sns.publish(
                  TopicArn=os.environ['NOTIFICATION_TOPIC'],
                  Message=message,
                  Subject='GuardDuty SSH NACL Remediation Triggered'
              )

              return {'statusCode': 200, 'body': message}

  GuardDutyEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: SSHBruteForceRemediationRule
      Description: Triggers Lambda and SNS on GuardDuty SSH brute force attacks
      EventPattern:
        source:
          - aws.guardduty
        detail-type:
          - GuardDuty Finding
        detail:
          severity:
            - numeric: [">", 5]
          type:
            - prefix: "UnauthorizedAccess:EC2/SSHBruteForce"
      State: ENABLED
      Targets:
        - Arn: !GetAtt RemediationLambda.Arn
          Id: SSHRemediationLambdaTarget
        - Arn: !Ref NotificationTopic
          Id: NotifySecurityTeam
      RetryPolicy:
        MaximumRetryAttempts: 0

  RemediationInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RemediationLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt GuardDutyEventRule.Arn

Outputs:
  LambdaFunctionArn:
    Description: ARN of the GuardDuty Remediation Lambda
    Value: !GetAtt RemediationLambda.Arn

  NotificationTopicArn:
    Description: ARN of the SNS Topic for Security Team Alerts
    Value: !Ref NotificationTopic
