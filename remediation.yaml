AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda-based GuardDuty SSH Brute Force Remediation using NACL and SNS Alert

Parameters:
  NotificationEmail:
    Type: String
    Description: Email address to notify on threat detection

Resources:
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "GuardDuty Alerts"
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail

  RemediationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: RemediationPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeSubnets
                  - ec2:DescribeNetworkAcls
                  - ec2:CreateNetworkAclEntry
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref NotificationTopic

  RemediationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: sshNACLRemediationLambda
      Runtime: python3.9
      Role: !GetAtt RemediationLambdaRole.Arn
      Handler: index.lambda_handler
      Timeout: 60
      Environment:
        Variables:
          NOTIFICATION_TOPIC: !Ref NotificationTopic
      Code:
        ZipFile: |
          import os
          import json
          import boto3

          ec2 = boto3.client('ec2')
          sns = boto3.client('sns')

          def get_attacker_ip(event):
              return (event.get('detail', {})
                          .get('service', {})
                          .get('action', {})
                          .get('networkConnectionAction', {})
                          .get('localIpDetails', {})
                          .get('ipAddressV4'))

          def get_target_ip(event):
            return (event.get('detail', {})
                          .get('service', {})
                          .get('action', {})
                          .get('networkConnectionAction', {})
                          .get('remoteIpDetails', {})
                          .get('ipAddressV4'))

          def ip_already_blocked(nacl_id, ip):
            nacl = ec2.describe_network_acls(NetworkAclIds=[nacl_id])['NetworkAcls'][0]
            for entry in nacl['Entries']:
                if (entry['RuleAction'] == 'deny' and
                    entry['Protocol'] == '6' and
                    entry.get('CidrBlock') == f"{ip}/32" and
                    entry.get('PortRange', {}).get('From') == 22):
                    return True
            return False                

          def get_target_instance_id(event):
              return event.get('detail', {}).get('resource', {}).get('instanceDetails', {}).get('instanceId')

          def get_subnet_id(instance_id):
              response = ec2.describe_instances(InstanceIds=[instance_id])
              return response['Reservations'][0]['Instances'][0]['SubnetId']

          def get_nacl_id(subnet_id):
              nacls = ec2.describe_network_acls()['NetworkAcls']
              for nacl in nacls:
                  for assoc in nacl.get('Associations', []):
                      if assoc['SubnetId'] == subnet_id:
                          return nacl['NetworkAclId']
              raise Exception(f"NACL not found for subnet {subnet_id}")

          def find_available_rule_number(nacl_id):
              nacl = ec2.describe_network_acls(NetworkAclIds=[nacl_id])['NetworkAcls'][0]
              used_numbers = [entry['RuleNumber'] for entry in nacl['Entries']]
              for i in range(1, 100):
                  if i not in used_numbers:
                      return i
              raise Exception("No available NACL rule numbers")

          def lambda_handler(event, context):
              attacker_ip = get_attacker_ip(event)
              target_ip = get_target_ip(event)
              instance_id = get_target_instance_id(event)
              if not attacker_ip or not instance_id:
                  print("Missing attacker IP or instance ID in event.")
                  return {'statusCode': 400, 'body': 'Invalid GuardDuty event format'}

              subnet_id = get_subnet_id(instance_id)
              nacl_id = get_nacl_id(subnet_id)
              rule_number = find_available_rule_number(nacl_id)

              print("--------------------------------")
              print(f"nacl_id: {nacl_id}")
              print(f"rule_number: {rule_number}")
              print(f"attacker_ip: {attacker_ip}")
              print(f"instance_id: {instance_id}")
              print(f"subnet_id: {subnet_id}")
              print(f"event: {event}")
              print("--------------------------------")

              if not ip_already_blocked(nacl_id, attacker_ip):
                ec2.create_network_acl_entry(
                    NetworkAclId=nacl_id,
                    RuleNumber=rule_number,
                    Protocol='6',  # TCP
                    RuleAction='deny',
                    Egress=False,
                    CidrBlock=f"{attacker_ip}/32",
                    PortRange={'From': 22, 'To': 22}
                )

              if not ip_already_blocked(nacl_id, target_ip):
                ec2.create_network_acl_entry(
                    NetworkAclId=nacl_id,
                    RuleNumber=rule_number,
                    Protocol='6',  # TCP
                    RuleAction='deny',
                    Egress=True,
                    CidrBlock=f"{target_ip}/32",
                    PortRange={'From': 22, 'To': 22}
                )

              message = f"GuardDuty detected SSH brute force from {attacker_ip}. Blocked via NACL {nacl_id}, rule {rule_number}."
              print(message)

              sns.publish(
                  TopicArn=os.environ['NOTIFICATION_TOPIC'],
                  Message=message,
                  Subject='GuardDuty SSH NACL Remediation Triggered'
              )

              return {'statusCode': 200, 'body': message}

  GuardDutyEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: SSHBruteForceRemediationRule
      Description: Triggers Lambda and SNS on GuardDuty SSH brute force attacks
      EventPattern:
        source:
          - aws.guardduty
        detail-type:
          - GuardDuty Finding
        detail:
          severity:
            - numeric: [">", 5]
          type:
            - prefix: "UnauthorizedAccess:EC2/SSHBruteForce"
      State: ENABLED
      Targets:
        - Arn: !GetAtt RemediationLambda.Arn
          Id: SSHRemediationLambdaTarget
        - Arn: !Ref NotificationTopic
          Id: NotifySecurityTeam

  RemediationInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RemediationLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt GuardDutyEventRule.Arn

Outputs:
  LambdaFunctionArn:
    Description: ARN of the GuardDuty Remediation Lambda
    Value: !GetAtt RemediationLambda.Arn

  NotificationTopicArn:
    Description: ARN of the SNS Topic for Security Team Alerts
    Value: !Ref NotificationTopic
