AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda-based GuardDuty SSH Brute Force Remediation with SNS Alert

Parameters:
  NotificationEmail:
    Type: String
    Description: Email address to notify on threat detection

Resources:
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "GuardDuty Alerts"
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail

  RemediationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: RemediationPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:DescribeSecurityGroups
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:CreateTags
                  - ec2:StopInstances
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref NotificationTopic

  RemediationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: sshRemediationLambda
      Runtime: python3.9
      Role: !GetAtt RemediationLambdaRole.Arn
      Handler: index.lambda_handler
      Timeout: 60
      Environment:
        Variables:
          TARGET_SG_ID: !ImportValue LinuxTargetSecurityGroupId
          NOTIFICATION_TOPIC: !Ref NotificationTopic
      Code:
        ZipFile: |
          import os
          import logging
          import boto3
          from botocore.config import Config
          from typing import Optional
          from datetime import datetime

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          TARGET_SG = os.environ['TARGET_SG_ID']
          TOPIC_ARN = os.environ['NOTIFICATION_TOPIC']
          PORT = 22
          PROTOCOL = 'tcp'
          OPEN_CIDR = '0.0.0.0/0'

          ec2 = boto3.client('ec2', config=Config(retries={'max_attempts': 8}))
          sns = boto3.client('sns')

          def attacker_ip(event) -> Optional[str]:
              return (
                  event.get('detail', {})
                       .get('service', {})
                       .get('action', {})
                       .get('networkConnectionAction', {})
                       .get('localIpDetails', {})
                       .get('ipAddressV4')
              )

          def get_instance_info(event):
              details = event.get("detail", {}).get("resource", {}).get("instanceDetails", {})
              tags = {t['key']: t['value'] for t in details.get("tags", [])}
              logger.info(f"Event: {event}")
              logger.info(f"Instance tags: {tags}")
              logger.info(f"Instance ID: {details.get('instanceId', 'N/A')}")
              logger.info(f"VPC ID: {details.get('networkInterfaces', [{}])[0].get('vpcId', 'N/A')}")
              logger.info(f"Region: {event.get('region', 'N/A')}")
              
              return {
                  "instance_id": details.get("instanceId", "N/A"),
                  "vpc_id": details.get("networkInterfaces", [{}])[0].get("vpcId", "N/A"),
                  "region": event.get("region", "N/A")
              }

          def build_alert_message(attacker_ip, instance_info, sg_id):
              now = datetime.utcnow().isoformat() + 'Z'
              return (
                  f"🚨 GuardDuty SSH Brute Force Alert\n\n"
                  f"Attacker IP: {attacker_ip}\n"
                  f"Target Instance ID: {instance_info['instance_id']}\n"
                  f"Region: {instance_info['region']}\n"
                  f"VPC ID: {instance_info['vpc_id']}\n"
                  f"Security Group Affected: {sg_id}\n"
                  f"Action Taken: Removed 0.0.0.0/0 SSH rule from SG\n"
                  f"Time: Automatically remediated by Lambda at {now}"
              )

          def _respond(code: int, msg: str):
              logger.info(msg)
              return {'statusCode': code, 'body': msg}

          def lambda_handler(event, context):
              ip = attacker_ip(event)
              if not ip:
                  return _respond(400, 'No IP found in GuardDuty finding.')

              instance_info = get_instance_info(event)
              message = build_alert_message(ip, instance_info, TARGET_SG)

              try:
                  ec2.revoke_security_group_ingress(
                      GroupId=TARGET_SG,
                      IpPermissions=[{
                          'IpProtocol': PROTOCOL,
                          'FromPort': PORT,
                          'ToPort': PORT,
                          'IpRanges': [{'CidrIp': OPEN_CIDR}]
                      }]
                  )

                  # Tag and stop instance for forensics
                  ec2.create_tags(
                      Resources=[instance_info['instance_id']],
                      Tags=[
                          {'Key': 'Status', 'Value': 'Quarantined'},
                          {'Key': 'RemediatedBy', 'Value': 'RemediationLambda'},
                          {'Key': 'RemediatedAt', 'Value': now},
                          {'Key': 'RemediationType', 'Value': 'SecurityGroupRevoke'}
                      ]
                  )

                  ec2.stop_instances(
                      InstanceIds=[instance_info['instance_id']]
                  )

                  sns.publish(
                      TopicArn=TOPIC_ARN,
                      Subject='GuardDuty SSH Brute Force Alert',
                      Message=message
                  )

                  return _respond(200, f"✅ Remediation applied. Removed {OPEN_CIDR} rule from {TARGET_SG}, tagged and stopped instance {instance_info['instance_id']} (attacker {attacker_ip})")
              except ec2.exceptions.ClientError as e:
                  if e.response['Error']['Code'] == 'InvalidPermission.NotFound':
                      return _respond(200, f"⚠️ Rule already removed. Nothing to revoke for {TARGET_SG}")
                  return _respond(500, f"EC2 error: {e}")
              except Exception as e:
                  return _respond(500, f"Unexpected error: {e}")


  GuardDutyEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: SSHBruteForceRemediationRule
      Description: Triggers Lambda and SNS on GuardDuty SSH brute force attacks
      EventPattern:
        source:
          - aws.guardduty
        detail-type:
          - GuardDuty Finding
        detail:
          severity:
            - numeric: [">", 5]
          type:
            - prefix: "UnauthorizedAccess:EC2/SSHBruteForce"
      State: ENABLED
      Targets:
        - Arn: !GetAtt RemediationLambda.Arn
          Id: SSHRemediationLambdaTarget
        - Arn: !Ref NotificationTopic
          Id: NotifySecurityTeam

  RemediationInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RemediationLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt GuardDutyEventRule.Arn

Outputs:
  LambdaFunctionArn:
    Description: ARN of the GuardDuty Remediation Lambda
    Value: !GetAtt RemediationLambda.Arn

  NotificationTopicArn:
    Description: ARN of the SNS Topic for Security Team Alerts
    Value: !Ref NotificationTopic